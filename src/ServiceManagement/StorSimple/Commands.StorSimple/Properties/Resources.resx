<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackupPoliciesReturnedCount" xml:space="preserve">
    <value># of backups policies returned : {0}</value>
  </data>
  <data name="BackupPolicyFound" xml:space="preserve">
    <value>BackupPolicy with id {0} found!</value>
  </data>
  <data name="BackupPolicyNotFound" xml:space="preserve">
    <value>No BackupPolicy was found with the given name. Try giving a different name or remove the Name paramter altogether to get all backuppolicies on the device</value>
  </data>
  <data name="FailureMessageSubmitJob" xml:space="preserve">
    <value>The {0} job failed to submit. </value>
  </data>
  <data name="NotAllowedErrorDataContainerEncryption" xml:space="preserve">
    <value>Please provide the EncryptionKey.</value>
  </data>
  <data name="NotFoundMessageACR" xml:space="preserve">
    <value>The specified access control record does not exist.</value>
  </data>
  <data name="NotFoundMessageDevice" xml:space="preserve">
    <value>The specified device does not exist.</value>
  </data>
  <data name="NotFoundMessageResource" xml:space="preserve">
    <value>The specified resource does not exist.</value>
  </data>
  <data name="NotFoundMessageStorageAccount" xml:space="preserve">
    <value>The specified storage account does not exist.</value>
  </data>
  <data name="RemoveASSDBackupMessage" xml:space="preserve">
    <value>Removing backup with backupId {0}...</value>
  </data>
  <data name="RemoveASSDBackupPolicyMessage" xml:space="preserve">
    <value>Removing backuppolicy with backuppolicyId {0}...</value>
  </data>
  <data name="RemoveASSDBackupPolicyWarningMessage" xml:space="preserve">
    <value>Are you sure you want to remove the backuppolicy with backuppolicyId{0}?</value>
  </data>
  <data name="RemoveASSDBackupWarningMessage" xml:space="preserve">
    <value>Are you sure you want to remove the backup with backupId{0}?</value>
  </data>
  <data name="NotFoundMessageVirtualDisk" xml:space="preserve">
    <value>The specified volume does not exist.</value>
  </data>
  <data name="RemoveConfirmationACR" xml:space="preserve">
    <value>Removing access control record...</value>
  </data>
  <data name="RemoveConfirmationDataContainer" xml:space="preserve">
    <value>Removing volume container...</value>
  </data>
  <data name="RemoveConfirmationSAC" xml:space="preserve">
    <value>Removing storage account...</value>
  </data>
  <data name="RemoveConfirmationVolume" xml:space="preserve">
    <value>Removing volume...</value>
  </data>
  <data name="RemoveWarningACR" xml:space="preserve">
    <value>Are you sure you want to remove the access control record?</value>
  </data>
  <data name="RemoveWarningDataContainer" xml:space="preserve">
    <value>Are you sure you want to remove the volume container?</value>
  </data>
  <data name="RemoveWarningSAC" xml:space="preserve">
    <value>Are you sure you want to remove the storage account?</value>
  </data>
  <data name="RemoveWarningVolume" xml:space="preserve">
    <value>Are you sure you want to remove the volume?</value>
  </data>
  <data name="StartASSDBackupRestoreJobMessage" xml:space="preserve">
    <value>Restoring backup with backupId {0}...</value>
  </data>
  <data name="StartASSDBackupRestoreJobWarningMessage" xml:space="preserve">
    <value>Are you sure you want to restore the backup with backupId{0}?</value>
  </data>
  <data name="SuccessMessageSetResourceContext" xml:space="preserve">
    <value>Context set successfully for the given resource name.</value>
  </data>
  <data name="SuccessMessageSubmitJob" xml:space="preserve">
    <value>The {0} job is submitted successfully. Please use the command Get-AzureStorSimpleJob -InstanceId {1} for tracking the job status</value>
  </data>
  <data name="InvalidBackupIdParameter" xml:space="preserve">
    <value>Specify valid string for BackupId parameter</value>
  </data>
  <data name="InvalidBackupObjectParameter" xml:space="preserve">
    <value>Specify valid Backup object for Backup parameter </value>
  </data>
  <data name="InvalidBackupPolicyIdParameter" xml:space="preserve">
    <value>Specify valid string for BackupPolicyId parameter</value>
  </data>
  <data name="InvalidBackupPolicyObjectParameter" xml:space="preserve">
    <value>Specify valid BackupPolicy object for BackupPolicy Parameter</value>
  </data>
  <data name="BackupNextPageFormatMessage" xml:space="preserve">
    <value>More backups are available for your query. To access the next page of your result use \"-First {0} -Skip {1}\" in your commandlet</value>
  </data>
  <data name="BackupNextPagewithNoFirstMessage" xml:space="preserve">
    <value>More backups are available in the subsequent pages for your query. To access the next page use \"-Skip {0}\"  in your commandlet</value>
  </data>
  <data name="BackupNoMorePagesMessage" xml:space="preserve">
    <value>No more backup sets are present for your query!</value>
  </data>
  <data name="FirstParameterInvalidMessage" xml:space="preserve">
    <value>Parameter First cannot be &lt;0</value>
  </data>
  <data name="InvalidBackupSchedulesToAddParameter" xml:space="preserve">
    <value>Atleast one BackupSchedule should be present in BackupSchedulesToAdd parameter</value>
  </data>
  <data name="InvalidFromMessage" xml:space="preserve">
    <value>Provide valid datetime string for From parameter!</value>
  </data>
  <data name="InvalidToMessage" xml:space="preserve">
    <value>Provide valid datetime string for To parameter!</value>
  </data>
  <data name="InvalidVolumeIdsToAddParameter" xml:space="preserve">
    <value>Atleast one VolumeId should be present in VolumeIdsToAdd parameter</value>
  </data>
  <data name="SkipParameterInvalidMessage" xml:space="preserve">
    <value>Parameter Skip cannot be &lt;0</value>
  </data>
  <data name="StartFromDateForBackupNotValid" xml:space="preserve">
    <value>Provide valid dateTime for StartFrom parameter</value>
  </data>
</root>